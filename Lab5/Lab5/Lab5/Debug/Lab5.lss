
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a9c  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003df5  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e6  00000000  00000000  00008e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f02  00000000  00000000  000097a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  0000c6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000c91e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_88>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a7 30       	cpi	r26, 0x07	; 7
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:
uint8_t volatile accel_flag = 0;

int main()
{
	
	spi_init();
 230:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_init>
	PORTF.DIRSET = 0b00000100;
 234:	e0 ea       	ldi	r30, 0xA0	; 160
 236:	f6 e0       	ldi	r31, 0x06	; 6
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = 0b00000100;
 23c:	85 83       	std	Z+5, r24	; 0x05
	
	PORTA.DIRCLR = 0b00010000;
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f6 e0       	ldi	r31, 0x06	; 6
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	82 83       	std	Z+2, r24	; 0x02
	PORTA.OUTCLR = 0b00010000;
 246:	86 83       	std	Z+6, r24	; 0x06
	
	PORTD.DIRSET = 0xff;
 248:	e0 e6       	ldi	r30, 0x60	; 96
 24a:	f6 e0       	ldi	r31, 0x06	; 6
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xff;
 250:	85 83       	std	Z+5, r24	; 0x05

	//set pin 7 as input
	PORTC.DIRCLR= 0b11000000;
 252:	e0 e4       	ldi	r30, 0x40	; 64
 254:	f6 e0       	ldi	r31, 0x06	; 6
 256:	90 ec       	ldi	r25, 0xC0	; 192
 258:	92 83       	std	Z+2, r25	; 0x02
	//enable low level interrupts
	PORTC.INTCTRL = 0x01;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	81 87       	std	Z+9, r24	; 0x09
	//enable external interrupts on pin 7
	PORTC.INT0MASK = 0b11000000;
 25e:	92 87       	std	Z+10, r25	; 0x0a
	
	PMIC.CTRL = 0x01;
 260:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 264:	78 94       	sei
	
	uint8_t volatile data;
	
	//accel_init();
	accel_init();
 266:	0e 94 06 02 	call	0x40c	; 0x40c <accel_init>
	init_usart();
 26a:	0e 94 0f 02 	call	0x41e	; 0x41e <init_usart>
	
	while (1) {
		if (accel_flag == 1) {
 26e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x3e>
			send_char_usart(0x03);
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(xL);
 27c:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <xL>
 280:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(xH);
 284:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xH>
 288:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(yL);
 28c:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <yL>
 290:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(yH);
 294:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <yH>
 298:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(zL);
 29c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <zL>
 2a0:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(zH);
 2a4:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <zH>
 2a8:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			send_char_usart(0xFC);
 2ac:	8c ef       	ldi	r24, 0xFC	; 252
 2ae:	0e 94 27 02 	call	0x44e	; 0x44e <send_char_usart>
			accel_flag = 0;
 2b2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 2b6:	db cf       	rjmp	.-74     	; 0x26e <main+0x3e>

000002b8 <__vector_2>:
		}
	}
}

ISR(PORTC_INT0_vect) {
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	08 b6       	in	r0, 0x38	; 56
 2c4:	0f 92       	push	r0
 2c6:	18 be       	out	0x38, r1	; 56
 2c8:	09 b6       	in	r0, 0x39	; 57
 2ca:	0f 92       	push	r0
 2cc:	19 be       	out	0x39, r1	; 57
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	1b be       	out	0x3b, r1	; 59
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	
	PORTD.OUTTGL = 0xff;
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
	xL = accel_read(0x28);
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 2f8:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <xL>
	xH = accel_read(0x29);
 2fc:	89 e2       	ldi	r24, 0x29	; 41
 2fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 302:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xH>
	
	yL = accel_read(0x2a);
 306:	8a e2       	ldi	r24, 0x2A	; 42
 308:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 30c:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <yL>
	yH = accel_read(0x2b);
 310:	8b e2       	ldi	r24, 0x2B	; 43
 312:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 316:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <yH>
	
	zL = accel_read(0x2c);
 31a:	8c e2       	ldi	r24, 0x2C	; 44
 31c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 320:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <zL>
	zH = accel_read(0x2d);
 324:	8d e2       	ldi	r24, 0x2D	; 45
 326:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <accel_read>
 32a:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <zH>
	
	accel_flag = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0b be       	out	0x3b, r0	; 59
 350:	0f 90       	pop	r0
 352:	09 be       	out	0x39, r0	; 57
 354:	0f 90       	pop	r0
 356:	08 be       	out	0x38, r0	; 56
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_88>:


ISR(USARTD0_RXC_vect) {
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	08 b6       	in	r0, 0x38	; 56
 36e:	0f 92       	push	r0
 370:	18 be       	out	0x38, r1	; 56
 372:	0b b6       	in	r0, 0x3b	; 59
 374:	0f 92       	push	r0
 376:	1b be       	out	0x3b, r1	; 59
 378:	8f 93       	push	r24
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	USARTD0.DATA = USARTD0.DATA;
 37e:	e0 ea       	ldi	r30, 0xA0	; 160
 380:	f9 e0       	ldi	r31, 0x09	; 9
 382:	80 81       	ld	r24, Z
 384:	80 83       	st	Z, r24
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0b be       	out	0x3b, r0	; 59
 390:	0f 90       	pop	r0
 392:	08 be       	out	0x38, r0	; 56
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <spi_init>:
	return inData;
}

uint8_t spi_read() {
	return spi_write(0xff);
}
 39e:	88 eb       	ldi	r24, 0xB8	; 184
 3a0:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
 3a4:	8c e5       	ldi	r24, 0x5C	; 92
 3a6:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 3aa:	08 95       	ret

000003ac <spi_write>:
 3ac:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 3b0:	e0 ec       	ldi	r30, 0xC0	; 192
 3b2:	fb e0       	ldi	r31, 0x0B	; 11
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	88 23       	and	r24, r24
 3b8:	ec f7       	brge	.-6      	; 0x3b4 <spi_write+0x8>
 3ba:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 3be:	08 95       	ret

000003c0 <accel_write>:

void accel_write(uint8_t reg_addr, uint8_t data) 
{
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	06 2f       	mov	r16, r22
	uint8_t writePrefix = 0b00000000;
	reg_addr |= writePrefix;	
	
	//set /SS low 
	PORTF.OUTCLR = 0b00001000;
 3ca:	c0 ea       	ldi	r28, 0xA0	; 160
 3cc:	d6 e0       	ldi	r29, 0x06	; 6
 3ce:	18 e0       	ldi	r17, 0x08	; 8
 3d0:	1e 83       	std	Y+6, r17	; 0x06
	
	//write the mode and data
	spi_write(reg_addr);
 3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <spi_write>
	spi_write(data);
 3d6:	80 2f       	mov	r24, r16
 3d8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <spi_write>
	
	//set /SS high
	PORTF.OUTSET = 0b00001000;
 3dc:	1d 83       	std	Y+5, r17	; 0x05
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <accel_read>:

uint8_t accel_read(uint8_t reg_addr)
{
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
	uint8_t readPrefix = 0b10000000;
	reg_addr |= readPrefix;
	
	//set /SS low
	PORTF.OUTCLR = 0b00001000;
 3ee:	c0 ea       	ldi	r28, 0xA0	; 160
 3f0:	d6 e0       	ldi	r29, 0x06	; 6
 3f2:	18 e0       	ldi	r17, 0x08	; 8
 3f4:	1e 83       	std	Y+6, r17	; 0x06
	
	//write the mode and random data
	 
	 spi_write(reg_addr);
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <spi_write>
	 uint8_t readData = spi_write(0xff);
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	0e 94 d6 01 	call	0x3ac	; 0x3ac <spi_write>
	
	//set /SS high
	PORTF.OUTSET = 0b00001000;
 402:	1d 83       	std	Y+5, r17	; 0x05
	
	return readData;
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	08 95       	ret

0000040c <accel_init>:

void accel_init(void) 
{
	uint8_t reg4_a = 0x23;
	uint8_t data = 0b10011000;
	accel_write(reg4_a, data);
 40c:	68 e9       	ldi	r22, 0x98	; 152
 40e:	83 e2       	ldi	r24, 0x23	; 35
 410:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <accel_write>
	
	uint8_t reg5_a = 0x20;
	data = 0b10010111;
	accel_write(reg5_a, data);
 414:	67 e9       	ldi	r22, 0x97	; 151
 416:	80 e2       	ldi	r24, 0x20	; 32
 418:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <accel_write>
 41c:	08 95       	ret

0000041e <init_usart>:
}

void init_usart(void) 
{
	PORTD.DIRSET = PIN3_bm;
 41e:	e0 e6       	ldi	r30, 0x60	; 96
 420:	f6 e0       	ldi	r31, 0x06	; 6
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	82 83       	std	Z+2, r24	; 0x02
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
 42a:	e0 ea       	ldi	r30, 0xA0	; 160
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	82 81       	ldd	r24, Z+2	; 0x02
 430:	82 60       	ori	r24, 0x02	; 2
 432:	82 83       	std	Z+2, r24	; 0x02

	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
 434:	e0 ea       	ldi	r30, 0xA0	; 160
 436:	f9 e0       	ldi	r31, 0x09	; 9
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_ODD_gc| USART_CHSIZE_8BIT_gc;
 43c:	83 e3       	ldi	r24, 0x33	; 51
 43e:	85 83       	std	Z+5, r24	; 0x05
	
	USARTD0.BAUDCTRLA = 11;
 440:	8b e0       	ldi	r24, 0x0B	; 11
 442:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (0x09 << 4)|(11>>8);
 444:	80 e9       	ldi	r24, 0x90	; 144
 446:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 448:	88 e1       	ldi	r24, 0x18	; 24
 44a:	84 83       	std	Z+4, r24	; 0x04
 44c:	08 95       	ret

0000044e <send_char_usart>:
}

void send_char_usart(uint8_t data) 
{
 	while((USARTD0.STATUS & 0x20) == 0) {}
 44e:	e0 ea       	ldi	r30, 0xA0	; 160
 450:	f9 e0       	ldi	r31, 0x09	; 9
 452:	91 81       	ldd	r25, Z+1	; 0x01
 454:	95 ff       	sbrs	r25, 5
 456:	fd cf       	rjmp	.-6      	; 0x452 <send_char_usart+0x4>
		 
	USARTD0.DATA = data;
 458:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
