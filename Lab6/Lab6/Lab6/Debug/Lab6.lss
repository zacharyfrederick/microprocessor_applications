
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fa5  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e67  00000000  00000000  00005abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f0  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000a214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000386d  00000000  00000000  0000a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c3  00000000  00000000  0000dc29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a4 30       	cpi	r26, 0x04	; 4
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 a8 02 	call	0x550	; 0x550 <main>
 228:	0c 94 bb 04 	jmp	0x976	; 0x976 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <adc_init>:
}

void start_tcc02()
{
	//start the timer with the 1024 prescaler
	TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
 248:	e0 e0       	ldi	r30, 0x00	; 0
 24a:	f2 e0       	ldi	r31, 0x02	; 2
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	84 83       	std	Z+4, r24	; 0x04
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <tcc0_init>:
 264:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
 268:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
 26c:	89 e0       	ldi	r24, 0x09	; 9
 26e:	9d e3       	ldi	r25, 0x3D	; 61
 270:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 274:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 278:	08 95       	ret

0000027a <start_tcc0>:
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 280:	08 95       	ret

00000282 <enable_sei>:
}

void enable_sei()
{
	sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <enable_pmic>:
}

void enable_pmic()
{
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 28c:	08 95       	ret

0000028e <enable_event_sys>:
}

void enable_event_sys()
{
	//sets event channel 0 source as tcc0 overflow
	EVSYS_CH0MUX = 0b11000000;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 294:	08 95       	ret

00000296 <enable_red_pwm>:
}

void enable_red_pwm()
{
	//enables the red pwm led on PD4 and turns it off
	PORTD.DIRSET = 0x10;
 296:	e0 e6       	ldi	r30, 0x60	; 96
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x10;
 29e:	85 83       	std	Z+5, r24	; 0x05
 2a0:	08 95       	ret

000002a2 <usartd0_init>:
}

void usartd0_init()
{
	PORTD.DIRSET = PIN3_bm;
 2a2:	e0 e6       	ldi	r30, 0x60	; 96
 2a4:	f6 e0       	ldi	r31, 0x06	; 6
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	82 83       	std	Z+2, r24	; 0x02
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc; //set the recieve complete interrupt to be low level
 2ae:	e0 ea       	ldi	r30, 0xA0	; 160
 2b0:	f9 e0       	ldi	r31, 0x09	; 9
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	85 83       	std	Z+5, r24	; 0x05
	USARTD0.BAUDCTRLA = (uint8_t) 11;
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((-7 << 4)|(11>>8));
 2c2:	80 e9       	ldi	r24, 0x90	; 144
 2c4:	87 83       	std	Z+7, r24	; 0x07
 2c6:	08 95       	ret

000002c8 <send_char_usart>:
}

void send_char_usart(char data)
{
		while ((USARTD0.STATUS & 0x20) == 0x00) {}
 2c8:	e0 ea       	ldi	r30, 0xA0	; 160
 2ca:	f9 e0       	ldi	r31, 0x09	; 9
 2cc:	91 81       	ldd	r25, Z+1	; 0x01
 2ce:	95 ff       	sbrs	r25, 5
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <send_char_usart+0x4>
			
		USARTD0.DATA = data;
 2d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 2d6:	08 95       	ret

000002d8 <convert_int_hex>:
	send_char_usart(13);
}

char convert_int_hex(int num)
{
	if (num < 10) {
 2d8:	8a 30       	cpi	r24, 0x0A	; 10
 2da:	91 05       	cpc	r25, r1
 2dc:	14 f4       	brge	.+4      	; 0x2e2 <convert_int_hex+0xa>
		return num + 48;
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	08 95       	ret
	} else {
		switch (num){
 2e2:	8c 30       	cpi	r24, 0x0C	; 12
 2e4:	91 05       	cpc	r25, r1
 2e6:	81 f0       	breq	.+32     	; 0x308 <convert_int_hex+0x30>
 2e8:	34 f4       	brge	.+12     	; 0x2f6 <convert_int_hex+0x1e>
 2ea:	8a 30       	cpi	r24, 0x0A	; 10
 2ec:	91 05       	cpc	r25, r1
 2ee:	b1 f0       	breq	.+44     	; 0x31c <convert_int_hex+0x44>
 2f0:	0b 97       	sbiw	r24, 0x0b	; 11
 2f2:	41 f0       	breq	.+16     	; 0x304 <convert_int_hex+0x2c>
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <convert_int_hex+0x40>
 2f6:	8e 30       	cpi	r24, 0x0E	; 14
 2f8:	91 05       	cpc	r25, r1
 2fa:	51 f0       	breq	.+20     	; 0x310 <convert_int_hex+0x38>
 2fc:	3c f0       	brlt	.+14     	; 0x30c <convert_int_hex+0x34>
 2fe:	0f 97       	sbiw	r24, 0x0f	; 15
 300:	49 f0       	breq	.+18     	; 0x314 <convert_int_hex+0x3c>
 302:	0a c0       	rjmp	.+20     	; 0x318 <convert_int_hex+0x40>
			case 10:
				return 'A';
				break;
			case 11:
				return 'B';
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	08 95       	ret
				break;
			case 12:
				return 'C';
 308:	83 e4       	ldi	r24, 0x43	; 67
 30a:	08 95       	ret
				break;
			case 13:
				return 'D';
 30c:	84 e4       	ldi	r24, 0x44	; 68
 30e:	08 95       	ret
				break;
			case 14:
				return 'E';
 310:	85 e4       	ldi	r24, 0x45	; 69
 312:	08 95       	ret
				break;
			case 15:
				return 'F';
 314:	86 e4       	ldi	r24, 0x46	; 70
 316:	08 95       	ret
				break;
			default:
				return 'X';
 318:	88 e5       	ldi	r24, 0x58	; 88
 31a:	08 95       	ret
	if (num < 10) {
		return num + 48;
	} else {
		switch (num){
			case 10:
				return 'A';
 31c:	81 e4       	ldi	r24, 0x41	; 65
			default:
				return 'X';
				break; 
		}
	}
}
 31e:	08 95       	ret

00000320 <output_voltage>:
			
		USARTD0.DATA = data;
}

void output_voltage(volatile float voltage, int result)
{
 320:	4f 92       	push	r4
 322:	5f 92       	push	r5
 324:	6f 92       	push	r6
 326:	7f 92       	push	r7
 328:	af 92       	push	r10
 32a:	bf 92       	push	r11
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <output_voltage+0x1e>
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	69 83       	std	Y+1, r22	; 0x01
 346:	7a 83       	std	Y+2, r23	; 0x02
 348:	8b 83       	std	Y+3, r24	; 0x03
 34a:	9c 83       	std	Y+4, r25	; 0x04
 34c:	5a 01       	movw	r10, r20
	//send_char_usart(12);
	//send the sign indicator
	if (voltage > 0) {
 34e:	69 81       	ldd	r22, Y+1	; 0x01
 350:	7a 81       	ldd	r23, Y+2	; 0x02
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
 360:	18 16       	cp	r1, r24
 362:	24 f4       	brge	.+8      	; 0x36c <output_voltage+0x4c>
		send_char_usart(43);
 364:	8b e2       	ldi	r24, 0x2B	; 43
 366:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
 36a:	b2 c0       	rjmp	.+356    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	} else {
		send_char_usart('-');//45);
 36c:	8d e2       	ldi	r24, 0x2D	; 45
 36e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
 372:	ae c0       	rjmp	.+348    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		int temp;
		int prevNum;
		float prevVoltage;
		
		//send the number in volts
		if (firstNumProcessed == 0) {
 374:	c1 14       	cp	r12, r1
 376:	d1 04       	cpc	r13, r1
 378:	e9 f4       	brne	.+58     	; 0x3b4 <output_voltage+0x94>
			temp = (int) voltage;
 37a:	69 81       	ldd	r22, Y+1	; 0x01
 37c:	7a 81       	ldd	r23, Y+2	; 0x02
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	9c 81       	ldd	r25, Y+4	; 0x04
 382:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixsfsi>
 386:	8b 01       	movw	r16, r22
			prevNum = temp;
			prevVoltage = voltage;
 388:	49 80       	ldd	r4, Y+1	; 0x01
 38a:	5a 80       	ldd	r5, Y+2	; 0x02
 38c:	6b 80       	ldd	r6, Y+3	; 0x03
 38e:	7c 80       	ldd	r7, Y+4	; 0x04
			if (temp < 0) {
				temp *= -1;
			}
			send_char_usart(temp + 48);
 390:	9b 01       	movw	r18, r22
 392:	77 23       	and	r23, r23
 394:	24 f4       	brge	.+8      	; 0x39e <output_voltage+0x7e>
 396:	22 27       	eor	r18, r18
 398:	33 27       	eor	r19, r19
 39a:	26 1b       	sub	r18, r22
 39c:	37 0b       	sbc	r19, r23
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	82 0f       	add	r24, r18
 3a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			send_char_usart(46);
 3a6:	8e e2       	ldi	r24, 0x2E	; 46
 3a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			firstNumProcessed = 1;
 3ac:	cc 24       	eor	r12, r12
 3ae:	c3 94       	inc	r12
 3b0:	d1 2c       	mov	r13, r1
 3b2:	22 c0       	rjmp	.+68     	; 0x3f8 <output_voltage+0xd8>
		} else {
			temp = (int) ((prevVoltage - prevNum) * 10);
 3b4:	b8 01       	movw	r22, r16
 3b6:	11 0f       	add	r17, r17
 3b8:	88 0b       	sbc	r24, r24
 3ba:	99 0b       	sbc	r25, r25
 3bc:	0e 94 99 03 	call	0x732	; 0x732 <__floatsisf>
 3c0:	9b 01       	movw	r18, r22
 3c2:	ac 01       	movw	r20, r24
 3c4:	c3 01       	movw	r24, r6
 3c6:	b2 01       	movw	r22, r4
 3c8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__subsf3>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e2       	ldi	r20, 0x20	; 32
 3d2:	51 e4       	ldi	r21, 0x41	; 65
 3d4:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 3d8:	2b 01       	movw	r4, r22
 3da:	3c 01       	movw	r6, r24
 3dc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixsfsi>
 3e0:	8b 01       	movw	r16, r22
			prevVoltage = (prevVoltage - prevNum) * 10; 
			prevNum = temp;
			if (temp < 0) {
				temp *= -1;
			}
			send_char_usart(temp + 48);
 3e2:	9b 01       	movw	r18, r22
 3e4:	77 23       	and	r23, r23
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <output_voltage+0xd0>
 3e8:	22 27       	eor	r18, r18
 3ea:	33 27       	eor	r19, r19
 3ec:	26 1b       	sub	r18, r22
 3ee:	37 0b       	sbc	r19, r23
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	82 0f       	add	r24, r18
 3f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	e8 1a       	sub	r14, r24
 3fc:	f1 08       	sbc	r15, r1
	} else {
		send_char_usart('-');//45);
	}
	
	int firstNumProcessed = 0;
	for(int i=0; i <3; i++) {
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	b9 cf       	rjmp	.-142    	; 0x374 <output_voltage+0x54>
			send_char_usart(temp + 48);
		}
	}
	
	//send space and unit indicator
	send_char_usart(' ');
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart('V');
 408:	86 e5       	ldi	r24, 0x56	; 86
 40a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	
	send_char_usart(' ');
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart('(');
 414:	88 e2       	ldi	r24, 0x28	; 40
 416:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart('0');
 41a:	80 e3       	ldi	r24, 0x30	; 48
 41c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart('x');
 420:	88 e7       	ldi	r24, 0x78	; 120
 422:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
 426:	95 01       	movw	r18, r10
 428:	bb 20       	and	r11, r11
 42a:	24 f4       	brge	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	22 27       	eor	r18, r18
 42e:	33 27       	eor	r19, r19
 430:	2a 19       	sub	r18, r10
 432:	3b 09       	sbc	r19, r11
 434:	79 01       	movw	r14, r18
	
	if (result < 0) {
		result *= -1;
	}
	
	float step1 = result / 16;
 436:	c9 01       	movw	r24, r18
 438:	33 23       	and	r19, r19
 43a:	0c f4       	brge	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	0f 96       	adiw	r24, 0x0f	; 15
 43e:	8c 01       	movw	r16, r24
 440:	15 95       	asr	r17
 442:	07 95       	ror	r16
 444:	15 95       	asr	r17
 446:	07 95       	ror	r16
 448:	15 95       	asr	r17
 44a:	07 95       	ror	r16
 44c:	15 95       	asr	r17
 44e:	07 95       	ror	r16
	float step2 = step1 / 16;
	int secondHex = (int) step1 % 16;
	float step3 = step2 / 16;
	int thirdHex = (int) step2 % 16;
	
	send_char_usart(convert_int_hex(thirdHex));
 450:	b8 01       	movw	r22, r16
 452:	01 2e       	mov	r0, r17
 454:	00 0c       	add	r0, r0
 456:	88 0b       	sbc	r24, r24
 458:	99 0b       	sbc	r25, r25
 45a:	0e 94 99 03 	call	0x732	; 0x732 <__floatsisf>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	40 e8       	ldi	r20, 0x80	; 128
 464:	5d e3       	ldi	r21, 0x3D	; 61
 466:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 46a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixsfsi>
 46e:	cb 01       	movw	r24, r22
 470:	8f 70       	andi	r24, 0x0F	; 15
 472:	90 78       	andi	r25, 0x80	; 128
 474:	99 23       	and	r25, r25
 476:	24 f4       	brge	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	80 6f       	ori	r24, 0xF0	; 240
 47c:	9f 6f       	ori	r25, 0xFF	; 255
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <convert_int_hex>
 484:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart(convert_int_hex(secondHex));
 488:	c8 01       	movw	r24, r16
 48a:	8f 70       	andi	r24, 0x0F	; 15
 48c:	90 78       	andi	r25, 0x80	; 128
 48e:	99 23       	and	r25, r25
 490:	24 f4       	brge	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	80 6f       	ori	r24, 0xF0	; 240
 496:	9f 6f       	ori	r25, 0xFF	; 255
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <convert_int_hex>
 49e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart(convert_int_hex(firstHex));
 4a2:	c7 01       	movw	r24, r14
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	90 78       	andi	r25, 0x80	; 128
 4a8:	99 23       	and	r25, r25
 4aa:	24 f4       	brge	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	80 6f       	ori	r24, 0xF0	; 240
 4b0:	9f 6f       	ori	r25, 0xFF	; 255
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <convert_int_hex>
 4b8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	
	
	send_char_usart(')');
 4bc:	89 e2       	ldi	r24, 0x29	; 41
 4be:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	
	//new line and carriage return
	send_char_usart(10);
 4c2:	8a e0       	ldi	r24, 0x0A	; 10
 4c4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
	send_char_usart(13);
 4c8:	8d e0       	ldi	r24, 0x0D	; 13
 4ca:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
}
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			
		USARTD0.DATA = data;
}

void output_voltage(volatile float voltage, int result)
{
 4d0:	0f 2e       	mov	r0, r31
 4d2:	f3 e0       	ldi	r31, 0x03	; 3
 4d4:	ef 2e       	mov	r14, r31
 4d6:	f1 2c       	mov	r15, r1
 4d8:	f0 2d       	mov	r31, r0
 4da:	c1 2c       	mov	r12, r1
 4dc:	d1 2c       	mov	r13, r1
 4de:	4a cf       	rjmp	.-364    	; 0x374 <output_voltage+0x54>
	send_char_usart(')');
	
	//new line and carriage return
	send_char_usart(10);
	send_char_usart(13);
}
 4e0:	24 96       	adiw	r28, 0x04	; 4
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	bf 90       	pop	r11
 4f8:	af 90       	pop	r10
 4fa:	7f 90       	pop	r7
 4fc:	6f 90       	pop	r6
 4fe:	5f 90       	pop	r5
 500:	4f 90       	pop	r4
 502:	08 95       	ret

00000504 <calculate_voltage>:
				break; 
		}
	}
}
float calculate_voltage(int16_t result)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	00 d0       	rcall	.+0      	; 0x50a <calculate_voltage+0x6>
 50a:	1f 92       	push	r1
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
	volatile float val = (result / 4096.0) * 5.0;
 510:	bc 01       	movw	r22, r24
 512:	99 0f       	add	r25, r25
 514:	88 0b       	sbc	r24, r24
 516:	99 0b       	sbc	r25, r25
 518:	0e 94 99 03 	call	0x732	; 0x732 <__floatsisf>
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	40 e8       	ldi	r20, 0x80	; 128
 522:	59 e3       	ldi	r21, 0x39	; 57
 524:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 ea       	ldi	r20, 0xA0	; 160
 52e:	50 e4       	ldi	r21, 0x40	; 64
 530:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 534:	69 83       	std	Y+1, r22	; 0x01
 536:	7a 83       	std	Y+2, r23	; 0x02
 538:	8b 83       	std	Y+3, r24	; 0x03
 53a:	9c 83       	std	Y+4, r25	; 0x04
	return val;
 53c:	69 81       	ldd	r22, Y+1	; 0x01
 53e:	7a 81       	ldd	r23, Y+2	; 0x02
 540:	8b 81       	ldd	r24, Y+3	; 0x03
 542:	9c 81       	ldd	r25, Y+4	; 0x04
}
 544:	24 96       	adiw	r28, 0x04	; 4
 546:	cd bf       	out	0x3d, r28	; 61
 548:	de bf       	out	0x3e, r29	; 62
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <main>:
volatile int16_t result;

int main(void)
{
	//init timer counter and enable interrupts and pmic
	tcc0_init();
 550:	0e 94 32 01 	call	0x264	; 0x264 <tcc0_init>
	enable_sei();
 554:	0e 94 41 01 	call	0x282	; 0x282 <enable_sei>
	enable_pmic();
 558:	0e 94 43 01 	call	0x286	; 0x286 <enable_pmic>
	enable_event_sys();
 55c:	0e 94 47 01 	call	0x28e	; 0x28e <enable_event_sys>
	adc_init();
 560:	0e 94 18 01 	call	0x230	; 0x230 <adc_init>
	enable_red_pwm();
 564:	0e 94 4b 01 	call	0x296	; 0x296 <enable_red_pwm>
	usartd0_init();
 568:	0e 94 51 01 	call	0x2a2	; 0x2a2 <usartd0_init>
	
	//start the timer 
	start_tcc0();
 56c:	0e 94 3d 01 	call	0x27a	; 0x27a <start_tcc0>
	
	while(1)
	{
		if (conversionComplete == 1) {
 570:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 574:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	d1 f7       	brne	.-12     	; 0x570 <main+0x20>
			output_voltage(calculate_voltage(result), result);
 57c:	c0 91 02 20 	lds	r28, 0x2002	; 0x802002 <result>
 580:	d0 91 03 20 	lds	r29, 0x2003	; 0x802003 <result+0x1>
 584:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <result>
 588:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <result+0x1>
 58c:	0e 94 82 02 	call	0x504	; 0x504 <calculate_voltage>
 590:	ae 01       	movw	r20, r28
 592:	0e 94 90 01 	call	0x320	; 0x320 <output_voltage>
			conversionComplete = 0;
 596:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 59a:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <_edata+0x1>
 59e:	e8 cf       	rjmp	.-48     	; 0x570 <main+0x20>

000005a0 <__vector_71>:
	}
	
}

ISR(ADCA_CH0_vect) 
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	08 b6       	in	r0, 0x38	; 56
 5ac:	0f 92       	push	r0
 5ae:	18 be       	out	0x38, r1	; 56
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
	conversionComplete = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 5bc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
	result = ADCA_CH0_RES;
 5c0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 5c4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 5c8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <result>
 5cc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <result+0x1>
	PORTD.OUTTGL = 0x10;	
 5d0:	80 e1       	ldi	r24, 0x10	; 16
 5d2:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	0f 90       	pop	r0
 5dc:	08 be       	out	0x38, r0	; 56
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__subsf3>:
 5e8:	50 58       	subi	r21, 0x80	; 128

000005ea <__addsf3>:
 5ea:	bb 27       	eor	r27, r27
 5ec:	aa 27       	eor	r26, r26
 5ee:	0e 94 0c 03 	call	0x618	; 0x618 <__addsf3x>
 5f2:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_round>
 5f6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscA>
 5fa:	38 f0       	brcs	.+14     	; 0x60a <__addsf3+0x20>
 5fc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_pscB>
 600:	20 f0       	brcs	.+8      	; 0x60a <__addsf3+0x20>
 602:	39 f4       	brne	.+14     	; 0x612 <__addsf3+0x28>
 604:	9f 3f       	cpi	r25, 0xFF	; 255
 606:	19 f4       	brne	.+6      	; 0x60e <__addsf3+0x24>
 608:	26 f4       	brtc	.+8      	; 0x612 <__addsf3+0x28>
 60a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_nan>
 60e:	0e f4       	brtc	.+2      	; 0x612 <__addsf3+0x28>
 610:	e0 95       	com	r30
 612:	e7 fb       	bst	r30, 7
 614:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>

00000618 <__addsf3x>:
 618:	e9 2f       	mov	r30, r25
 61a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_split3>
 61e:	58 f3       	brcs	.-42     	; 0x5f6 <__addsf3+0xc>
 620:	ba 17       	cp	r27, r26
 622:	62 07       	cpc	r22, r18
 624:	73 07       	cpc	r23, r19
 626:	84 07       	cpc	r24, r20
 628:	95 07       	cpc	r25, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__addsf3x+0x1c>
 62c:	79 f4       	brne	.+30     	; 0x64c <__addsf3x+0x34>
 62e:	a6 f5       	brtc	.+104    	; 0x698 <__addsf3x+0x80>
 630:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_zero>
 634:	0e f4       	brtc	.+2      	; 0x638 <__addsf3x+0x20>
 636:	e0 95       	com	r30
 638:	0b 2e       	mov	r0, r27
 63a:	ba 2f       	mov	r27, r26
 63c:	a0 2d       	mov	r26, r0
 63e:	0b 01       	movw	r0, r22
 640:	b9 01       	movw	r22, r18
 642:	90 01       	movw	r18, r0
 644:	0c 01       	movw	r0, r24
 646:	ca 01       	movw	r24, r20
 648:	a0 01       	movw	r20, r0
 64a:	11 24       	eor	r1, r1
 64c:	ff 27       	eor	r31, r31
 64e:	59 1b       	sub	r21, r25
 650:	99 f0       	breq	.+38     	; 0x678 <__addsf3x+0x60>
 652:	59 3f       	cpi	r21, 0xF9	; 249
 654:	50 f4       	brcc	.+20     	; 0x66a <__addsf3x+0x52>
 656:	50 3e       	cpi	r21, 0xE0	; 224
 658:	68 f1       	brcs	.+90     	; 0x6b4 <__addsf3x+0x9c>
 65a:	1a 16       	cp	r1, r26
 65c:	f0 40       	sbci	r31, 0x00	; 0
 65e:	a2 2f       	mov	r26, r18
 660:	23 2f       	mov	r18, r19
 662:	34 2f       	mov	r19, r20
 664:	44 27       	eor	r20, r20
 666:	58 5f       	subi	r21, 0xF8	; 248
 668:	f3 cf       	rjmp	.-26     	; 0x650 <__addsf3x+0x38>
 66a:	46 95       	lsr	r20
 66c:	37 95       	ror	r19
 66e:	27 95       	ror	r18
 670:	a7 95       	ror	r26
 672:	f0 40       	sbci	r31, 0x00	; 0
 674:	53 95       	inc	r21
 676:	c9 f7       	brne	.-14     	; 0x66a <__addsf3x+0x52>
 678:	7e f4       	brtc	.+30     	; 0x698 <__addsf3x+0x80>
 67a:	1f 16       	cp	r1, r31
 67c:	ba 0b       	sbc	r27, r26
 67e:	62 0b       	sbc	r22, r18
 680:	73 0b       	sbc	r23, r19
 682:	84 0b       	sbc	r24, r20
 684:	ba f0       	brmi	.+46     	; 0x6b4 <__addsf3x+0x9c>
 686:	91 50       	subi	r25, 0x01	; 1
 688:	a1 f0       	breq	.+40     	; 0x6b2 <__addsf3x+0x9a>
 68a:	ff 0f       	add	r31, r31
 68c:	bb 1f       	adc	r27, r27
 68e:	66 1f       	adc	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	c2 f7       	brpl	.-16     	; 0x686 <__addsf3x+0x6e>
 696:	0e c0       	rjmp	.+28     	; 0x6b4 <__addsf3x+0x9c>
 698:	ba 0f       	add	r27, r26
 69a:	62 1f       	adc	r22, r18
 69c:	73 1f       	adc	r23, r19
 69e:	84 1f       	adc	r24, r20
 6a0:	48 f4       	brcc	.+18     	; 0x6b4 <__addsf3x+0x9c>
 6a2:	87 95       	ror	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b7 95       	ror	r27
 6aa:	f7 95       	ror	r31
 6ac:	9e 3f       	cpi	r25, 0xFE	; 254
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__addsf3x+0x9a>
 6b0:	b0 cf       	rjmp	.-160    	; 0x612 <__addsf3+0x28>
 6b2:	93 95       	inc	r25
 6b4:	88 0f       	add	r24, r24
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <__addsf3x+0xa2>
 6b8:	99 27       	eor	r25, r25
 6ba:	ee 0f       	add	r30, r30
 6bc:	97 95       	ror	r25
 6be:	87 95       	ror	r24
 6c0:	08 95       	ret

000006c2 <__fixsfsi>:
 6c2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fixunssfsi>
 6c6:	68 94       	set
 6c8:	b1 11       	cpse	r27, r1
 6ca:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>
 6ce:	08 95       	ret

000006d0 <__fixunssfsi>:
 6d0:	0e 94 04 04 	call	0x808	; 0x808 <__fp_splitA>
 6d4:	88 f0       	brcs	.+34     	; 0x6f8 <__fixunssfsi+0x28>
 6d6:	9f 57       	subi	r25, 0x7F	; 127
 6d8:	98 f0       	brcs	.+38     	; 0x700 <__fixunssfsi+0x30>
 6da:	b9 2f       	mov	r27, r25
 6dc:	99 27       	eor	r25, r25
 6de:	b7 51       	subi	r27, 0x17	; 23
 6e0:	b0 f0       	brcs	.+44     	; 0x70e <__fixunssfsi+0x3e>
 6e2:	e1 f0       	breq	.+56     	; 0x71c <__fixunssfsi+0x4c>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	1a f0       	brmi	.+6      	; 0x6f4 <__fixunssfsi+0x24>
 6ee:	ba 95       	dec	r27
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__fixunssfsi+0x14>
 6f2:	14 c0       	rjmp	.+40     	; 0x71c <__fixunssfsi+0x4c>
 6f4:	b1 30       	cpi	r27, 0x01	; 1
 6f6:	91 f0       	breq	.+36     	; 0x71c <__fixunssfsi+0x4c>
 6f8:	0e 94 1e 04 	call	0x83c	; 0x83c <__fp_zero>
 6fc:	b1 e0       	ldi	r27, 0x01	; 1
 6fe:	08 95       	ret
 700:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_zero>
 704:	67 2f       	mov	r22, r23
 706:	78 2f       	mov	r23, r24
 708:	88 27       	eor	r24, r24
 70a:	b8 5f       	subi	r27, 0xF8	; 248
 70c:	39 f0       	breq	.+14     	; 0x71c <__fixunssfsi+0x4c>
 70e:	b9 3f       	cpi	r27, 0xF9	; 249
 710:	cc f3       	brlt	.-14     	; 0x704 <__fixunssfsi+0x34>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b3 95       	inc	r27
 71a:	d9 f7       	brne	.-10     	; 0x712 <__fixunssfsi+0x42>
 71c:	3e f4       	brtc	.+14     	; 0x72c <__fixunssfsi+0x5c>
 71e:	90 95       	com	r25
 720:	80 95       	com	r24
 722:	70 95       	com	r23
 724:	61 95       	neg	r22
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	08 95       	ret

0000072e <__floatunsisf>:
 72e:	e8 94       	clt
 730:	09 c0       	rjmp	.+18     	; 0x744 <__floatsisf+0x12>

00000732 <__floatsisf>:
 732:	97 fb       	bst	r25, 7
 734:	3e f4       	brtc	.+14     	; 0x744 <__floatsisf+0x12>
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	99 23       	and	r25, r25
 746:	a9 f0       	breq	.+42     	; 0x772 <__floatsisf+0x40>
 748:	f9 2f       	mov	r31, r25
 74a:	96 e9       	ldi	r25, 0x96	; 150
 74c:	bb 27       	eor	r27, r27
 74e:	93 95       	inc	r25
 750:	f6 95       	lsr	r31
 752:	87 95       	ror	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	f1 11       	cpse	r31, r1
 75c:	f8 cf       	rjmp	.-16     	; 0x74e <__floatsisf+0x1c>
 75e:	fa f4       	brpl	.+62     	; 0x79e <__floatsisf+0x6c>
 760:	bb 0f       	add	r27, r27
 762:	11 f4       	brne	.+4      	; 0x768 <__floatsisf+0x36>
 764:	60 ff       	sbrs	r22, 0
 766:	1b c0       	rjmp	.+54     	; 0x79e <__floatsisf+0x6c>
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	16 c0       	rjmp	.+44     	; 0x79e <__floatsisf+0x6c>
 772:	88 23       	and	r24, r24
 774:	11 f0       	breq	.+4      	; 0x77a <__floatsisf+0x48>
 776:	96 e9       	ldi	r25, 0x96	; 150
 778:	11 c0       	rjmp	.+34     	; 0x79c <__floatsisf+0x6a>
 77a:	77 23       	and	r23, r23
 77c:	21 f0       	breq	.+8      	; 0x786 <__floatsisf+0x54>
 77e:	9e e8       	ldi	r25, 0x8E	; 142
 780:	87 2f       	mov	r24, r23
 782:	76 2f       	mov	r23, r22
 784:	05 c0       	rjmp	.+10     	; 0x790 <__floatsisf+0x5e>
 786:	66 23       	and	r22, r22
 788:	71 f0       	breq	.+28     	; 0x7a6 <__floatsisf+0x74>
 78a:	96 e8       	ldi	r25, 0x86	; 134
 78c:	86 2f       	mov	r24, r22
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	2a f0       	brmi	.+10     	; 0x79e <__floatsisf+0x6c>
 794:	9a 95       	dec	r25
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	da f7       	brpl	.-10     	; 0x794 <__floatsisf+0x62>
 79e:	88 0f       	add	r24, r24
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <__fp_inf>:
 7a8:	97 f9       	bld	r25, 7
 7aa:	9f 67       	ori	r25, 0x7F	; 127
 7ac:	80 e8       	ldi	r24, 0x80	; 128
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	08 95       	ret

000007b4 <__fp_nan>:
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	80 ec       	ldi	r24, 0xC0	; 192
 7b8:	08 95       	ret

000007ba <__fp_pscA>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	18 06       	cpc	r1, r24
 7c4:	09 06       	cpc	r0, r25
 7c6:	08 95       	ret

000007c8 <__fp_pscB>:
 7c8:	00 24       	eor	r0, r0
 7ca:	0a 94       	dec	r0
 7cc:	12 16       	cp	r1, r18
 7ce:	13 06       	cpc	r1, r19
 7d0:	14 06       	cpc	r1, r20
 7d2:	05 06       	cpc	r0, r21
 7d4:	08 95       	ret

000007d6 <__fp_round>:
 7d6:	09 2e       	mov	r0, r25
 7d8:	03 94       	inc	r0
 7da:	00 0c       	add	r0, r0
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__fp_round+0xc>
 7de:	88 23       	and	r24, r24
 7e0:	52 f0       	brmi	.+20     	; 0x7f6 <__fp_round+0x20>
 7e2:	bb 0f       	add	r27, r27
 7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__fp_round+0x20>
 7e6:	bf 2b       	or	r27, r31
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_round+0x18>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__fp_round+0x20>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <__fp_split3>:
 7f8:	57 fd       	sbrc	r21, 7
 7fa:	90 58       	subi	r25, 0x80	; 128
 7fc:	44 0f       	add	r20, r20
 7fe:	55 1f       	adc	r21, r21
 800:	59 f0       	breq	.+22     	; 0x818 <__fp_splitA+0x10>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	71 f0       	breq	.+28     	; 0x822 <__fp_splitA+0x1a>
 806:	47 95       	ror	r20

00000808 <__fp_splitA>:
 808:	88 0f       	add	r24, r24
 80a:	97 fb       	bst	r25, 7
 80c:	99 1f       	adc	r25, r25
 80e:	61 f0       	breq	.+24     	; 0x828 <__fp_splitA+0x20>
 810:	9f 3f       	cpi	r25, 0xFF	; 255
 812:	79 f0       	breq	.+30     	; 0x832 <__fp_splitA+0x2a>
 814:	87 95       	ror	r24
 816:	08 95       	ret
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	14 06       	cpc	r1, r20
 81e:	55 1f       	adc	r21, r21
 820:	f2 cf       	rjmp	.-28     	; 0x806 <__fp_split3+0xe>
 822:	46 95       	lsr	r20
 824:	f1 df       	rcall	.-30     	; 0x808 <__fp_splitA>
 826:	08 c0       	rjmp	.+16     	; 0x838 <__fp_splitA+0x30>
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	99 1f       	adc	r25, r25
 830:	f1 cf       	rjmp	.-30     	; 0x814 <__fp_splitA+0xc>
 832:	86 95       	lsr	r24
 834:	71 05       	cpc	r23, r1
 836:	61 05       	cpc	r22, r1
 838:	08 94       	sec
 83a:	08 95       	ret

0000083c <__fp_zero>:
 83c:	e8 94       	clt

0000083e <__fp_szero>:
 83e:	bb 27       	eor	r27, r27
 840:	66 27       	eor	r22, r22
 842:	77 27       	eor	r23, r23
 844:	cb 01       	movw	r24, r22
 846:	97 f9       	bld	r25, 7
 848:	08 95       	ret

0000084a <__gesf2>:
 84a:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_cmp>
 84e:	08 f4       	brcc	.+2      	; 0x852 <__gesf2+0x8>
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	08 95       	ret

00000854 <__mulsf3>:
 854:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3x>
 858:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_round>
 85c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscA>
 860:	38 f0       	brcs	.+14     	; 0x870 <__mulsf3+0x1c>
 862:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_pscB>
 866:	20 f0       	brcs	.+8      	; 0x870 <__mulsf3+0x1c>
 868:	95 23       	and	r25, r21
 86a:	11 f0       	breq	.+4      	; 0x870 <__mulsf3+0x1c>
 86c:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 870:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_nan>
 874:	11 24       	eor	r1, r1
 876:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>

0000087a <__mulsf3x>:
 87a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_split3>
 87e:	70 f3       	brcs	.-36     	; 0x85c <__mulsf3+0x8>

00000880 <__mulsf3_pse>:
 880:	95 9f       	mul	r25, r21
 882:	c1 f3       	breq	.-16     	; 0x874 <__mulsf3+0x20>
 884:	95 0f       	add	r25, r21
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	55 1f       	adc	r21, r21
 88a:	62 9f       	mul	r22, r18
 88c:	f0 01       	movw	r30, r0
 88e:	72 9f       	mul	r23, r18
 890:	bb 27       	eor	r27, r27
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	63 9f       	mul	r22, r19
 898:	aa 27       	eor	r26, r26
 89a:	f0 0d       	add	r31, r0
 89c:	b1 1d       	adc	r27, r1
 89e:	aa 1f       	adc	r26, r26
 8a0:	64 9f       	mul	r22, r20
 8a2:	66 27       	eor	r22, r22
 8a4:	b0 0d       	add	r27, r0
 8a6:	a1 1d       	adc	r26, r1
 8a8:	66 1f       	adc	r22, r22
 8aa:	82 9f       	mul	r24, r18
 8ac:	22 27       	eor	r18, r18
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	73 9f       	mul	r23, r19
 8b6:	b0 0d       	add	r27, r0
 8b8:	a1 1d       	adc	r26, r1
 8ba:	62 1f       	adc	r22, r18
 8bc:	83 9f       	mul	r24, r19
 8be:	a0 0d       	add	r26, r0
 8c0:	61 1d       	adc	r22, r1
 8c2:	22 1f       	adc	r18, r18
 8c4:	74 9f       	mul	r23, r20
 8c6:	33 27       	eor	r19, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	23 1f       	adc	r18, r19
 8ce:	84 9f       	mul	r24, r20
 8d0:	60 0d       	add	r22, r0
 8d2:	21 1d       	adc	r18, r1
 8d4:	82 2f       	mov	r24, r18
 8d6:	76 2f       	mov	r23, r22
 8d8:	6a 2f       	mov	r22, r26
 8da:	11 24       	eor	r1, r1
 8dc:	9f 57       	subi	r25, 0x7F	; 127
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	9a f0       	brmi	.+38     	; 0x908 <__mulsf3_pse+0x88>
 8e2:	f1 f0       	breq	.+60     	; 0x920 <__mulsf3_pse+0xa0>
 8e4:	88 23       	and	r24, r24
 8e6:	4a f0       	brmi	.+18     	; 0x8fa <__mulsf3_pse+0x7a>
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__mulsf3_pse+0x64>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	80 f0       	brcs	.+32     	; 0x920 <__mulsf3_pse+0xa0>
 900:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 904:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	e4 f3       	brlt	.-8      	; 0x904 <__mulsf3_pse+0x84>
 90c:	98 3e       	cpi	r25, 0xE8	; 232
 90e:	d4 f3       	brlt	.-12     	; 0x904 <__mulsf3_pse+0x84>
 910:	86 95       	lsr	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b7 95       	ror	r27
 918:	f7 95       	ror	r31
 91a:	e7 95       	ror	r30
 91c:	9f 5f       	subi	r25, 0xFF	; 255
 91e:	c1 f7       	brne	.-16     	; 0x910 <__mulsf3_pse+0x90>
 920:	fe 2b       	or	r31, r30
 922:	88 0f       	add	r24, r24
 924:	91 1d       	adc	r25, r1
 926:	96 95       	lsr	r25
 928:	87 95       	ror	r24
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret

0000092e <__fp_cmp>:
 92e:	99 0f       	add	r25, r25
 930:	00 08       	sbc	r0, r0
 932:	55 0f       	add	r21, r21
 934:	aa 0b       	sbc	r26, r26
 936:	e0 e8       	ldi	r30, 0x80	; 128
 938:	fe ef       	ldi	r31, 0xFE	; 254
 93a:	16 16       	cp	r1, r22
 93c:	17 06       	cpc	r1, r23
 93e:	e8 07       	cpc	r30, r24
 940:	f9 07       	cpc	r31, r25
 942:	c0 f0       	brcs	.+48     	; 0x974 <__fp_cmp+0x46>
 944:	12 16       	cp	r1, r18
 946:	13 06       	cpc	r1, r19
 948:	e4 07       	cpc	r30, r20
 94a:	f5 07       	cpc	r31, r21
 94c:	98 f0       	brcs	.+38     	; 0x974 <__fp_cmp+0x46>
 94e:	62 1b       	sub	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	95 0b       	sbc	r25, r21
 956:	39 f4       	brne	.+14     	; 0x966 <__fp_cmp+0x38>
 958:	0a 26       	eor	r0, r26
 95a:	61 f0       	breq	.+24     	; 0x974 <__fp_cmp+0x46>
 95c:	23 2b       	or	r18, r19
 95e:	24 2b       	or	r18, r20
 960:	25 2b       	or	r18, r21
 962:	21 f4       	brne	.+8      	; 0x96c <__fp_cmp+0x3e>
 964:	08 95       	ret
 966:	0a 26       	eor	r0, r26
 968:	09 f4       	brne	.+2      	; 0x96c <__fp_cmp+0x3e>
 96a:	a1 40       	sbci	r26, 0x01	; 1
 96c:	a6 95       	lsr	r26
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	81 1d       	adc	r24, r1
 972:	81 1d       	adc	r24, r1
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
