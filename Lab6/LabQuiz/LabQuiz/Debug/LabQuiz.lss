
LabQuiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fd7  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e7f  00000000  00000000  0000551b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000924  00000000  00000000  0000939a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00009cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003882  00000000  00000000  00009e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bd  00000000  00000000  0000d6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000dcab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a4 30       	cpi	r26, 0x04	; 4
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
 228:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <adc_init>:
}

void start_tcc0()
{
	//start the timer with the 1024 prescaler
	TCC0_CTRLA = TC_CLKSEL_DIV64_gc;
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
 248:	e0 e0       	ldi	r30, 0x00	; 0
 24a:	f2 e0       	ldi	r31, 0x02	; 2
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	84 83       	std	Z+4, r24	; 0x04
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <tcc0_init2>:
 264:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
 268:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	97 e2       	ldi	r25, 0x27	; 39
 270:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 274:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 278:	08 95       	ret

0000027a <start_tcc02>:
}

void start_tcc02()
{
	//start the timer with the 1024 prescaler
	TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 280:	08 95       	ret

00000282 <enable_sei>:
}

void enable_sei()
{
	sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <enable_pmic>:
}

void enable_pmic()
{
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 28c:	08 95       	ret

0000028e <enable_event_sys>:
}

void enable_event_sys()
{
	//sets event channel 0 source as tcc0 overflow
	EVSYS_CH0MUX = 0b11000000;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 294:	08 95       	ret

00000296 <enable_red_pwm>:
}

void enable_red_pwm()
{
	//enables the red pwm led on PD4 and turns it off
	PORTD.DIRSET = 0x40;
 296:	e0 e6       	ldi	r30, 0x60	; 96
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	80 e4       	ldi	r24, 0x40	; 64
 29c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x40;
 29e:	85 83       	std	Z+5, r24	; 0x05
 2a0:	08 95       	ret

000002a2 <usartd0_init>:
}

void usartd0_init()
{
	PORTD.DIRSET = PIN3_bm;
 2a2:	e0 e6       	ldi	r30, 0x60	; 96
 2a4:	f6 e0       	ldi	r31, 0x06	; 6
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	82 83       	std	Z+2, r24	; 0x02
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc; //set the recieve complete interrupt to be low level
 2ae:	e0 ea       	ldi	r30, 0xA0	; 160
 2b0:	f9 e0       	ldi	r31, 0x09	; 9
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	85 83       	std	Z+5, r24	; 0x05
	USARTD0.BAUDCTRLA = (uint8_t) 11;
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((-7 << 4)|(11>>8));
 2c2:	80 e9       	ldi	r24, 0x90	; 144
 2c4:	87 83       	std	Z+7, r24	; 0x07
 2c6:	08 95       	ret

000002c8 <send_char_usart>:
}

void send_char_usart(char data)
{
		while ((USARTD0.STATUS & 0x20) == 0x00) {}
 2c8:	e0 ea       	ldi	r30, 0xA0	; 160
 2ca:	f9 e0       	ldi	r31, 0x09	; 9
 2cc:	91 81       	ldd	r25, Z+1	; 0x01
 2ce:	95 ff       	sbrs	r25, 5
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <send_char_usart+0x4>
			
		USARTD0.DATA = data;
 2d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 2d6:	08 95       	ret

000002d8 <main>:
volatile int conversionComplete = 0;
volatile uint16_t result;

int main(void)
{
    tcc0_init2();
 2d8:	0e 94 32 01 	call	0x264	; 0x264 <tcc0_init2>
    enable_sei();
 2dc:	0e 94 41 01 	call	0x282	; 0x282 <enable_sei>
    enable_pmic();
 2e0:	0e 94 43 01 	call	0x286	; 0x286 <enable_pmic>
    enable_event_sys();
 2e4:	0e 94 47 01 	call	0x28e	; 0x28e <enable_event_sys>
    adc_init();
 2e8:	0e 94 18 01 	call	0x230	; 0x230 <adc_init>
    enable_red_pwm();
 2ec:	0e 94 4b 01 	call	0x296	; 0x296 <enable_red_pwm>
    usartd0_init();
 2f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <usartd0_init>
    start_tcc02();
 2f4:	0e 94 3d 01 	call	0x27a	; 0x27a <start_tcc02>
			send_char_usart(0xfc);
			conversionComplete = 0;
		}
		
		if (result < 980) {
			PORTD.OUTSET = 0x40;	
 2f8:	00 e6       	ldi	r16, 0x60	; 96
 2fa:	16 e0       	ldi	r17, 0x06	; 6
 2fc:	c0 e4       	ldi	r28, 0x40	; 64
    usartd0_init();
    start_tcc02();
	
    while (1) 
    {
		if (conversionComplete == 1) {
 2fe:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 302:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	c1 f4       	brne	.+48     	; 0x33a <main+0x62>
			int lowByte = (result >> (8 * 0)) & 0xff;
 30a:	c0 90 02 20 	lds	r12, 0x2002	; 0x802002 <result>
 30e:	d0 90 03 20 	lds	r13, 0x2003	; 0x802003 <result+0x1>
			int highByte = (result >> (8 * 1)) & 0xff;
 312:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <result>
 316:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <result+0x1>
			
			send_char_usart(0x03);
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			send_char_usart(lowByte);
 320:	8c 2d       	mov	r24, r12
 322:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			send_char_usart(highByte);
 326:	8f 2d       	mov	r24, r15
 328:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			send_char_usart(0xfc);
 32c:	8c ef       	ldi	r24, 0xFC	; 252
 32e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <send_char_usart>
			conversionComplete = 0;
 332:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 336:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <_edata+0x1>
		}
		
		if (result < 980) {
 33a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <result>
 33e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <result+0x1>
 342:	84 3d       	cpi	r24, 0xD4	; 212
 344:	93 40       	sbci	r25, 0x03	; 3
 346:	10 f4       	brcc	.+4      	; 0x34c <main+0x74>
			PORTD.OUTSET = 0x40;	
 348:	f8 01       	movw	r30, r16
 34a:	c5 83       	std	Z+5, r28	; 0x05
		} 
		
		if (result > 1100) {
 34c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <result>
 350:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <result+0x1>
 354:	8d 34       	cpi	r24, 0x4D	; 77
 356:	94 40       	sbci	r25, 0x04	; 4
 358:	90 f2       	brcs	.-92     	; 0x2fe <main+0x26>
			PORTD.OUTCLR = 0x40;
 35a:	f8 01       	movw	r30, r16
 35c:	c6 83       	std	Z+6, r28	; 0x06
 35e:	cf cf       	rjmp	.-98     	; 0x2fe <main+0x26>

00000360 <__vector_71>:
		}
    }
}

ISR(ADCA_CH0_vect)
{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	08 b6       	in	r0, 0x38	; 56
 36c:	0f 92       	push	r0
 36e:	18 be       	out	0x38, r1	; 56
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
	conversionComplete = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 37c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
	result = ADCA_CH0_RES;
 380:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 384:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 388:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <result>
 38c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <result+0x1>
	//PORTD.OUTTGL = 0x40;
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	08 be       	out	0x38, r0	; 56
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
