
Lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000400  00802000  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802400  00802400  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006601  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003df3  00000000  00000000  000070d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  0000aec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  0000b8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041fb  00000000  00000000  0000bae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f8  00000000  00000000  0000fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000fed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_20>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 e0       	ldi	r30, 0x04	; 4
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b4 e2       	ldi	r27, 0x24	; 36
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a6 30       	cpi	r26, 0x06	; 6
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 ba 01 	call	0x374	; 0x374 <main>
 244:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <init_ADC2>:
	//TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

void start_tc()
{
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f3 e0       	ldi	r31, 0x03	; 3
 250:	80 e2       	ldi	r24, 0x20	; 32
 252:	81 83       	std	Z+1, r24	; 0x01
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	82 83       	std	Z+2, r24	; 0x02
 258:	89 e0       	ldi	r24, 0x09	; 9
 25a:	80 83       	st	Z, r24
 25c:	08 95       	ret

0000025e <init_tc>:
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f8 e0       	ldi	r31, 0x08	; 8
 262:	10 a2       	std	Z+32, r1	; 0x20
 264:	11 a2       	std	Z+33, r1	; 0x21
 266:	87 e4       	ldi	r24, 0x47	; 71
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	86 a3       	std	Z+38, r24	; 0x26
 26c:	97 a3       	std	Z+39, r25	; 0x27
 26e:	08 95       	ret

00000270 <start_tc>:
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 276:	08 95       	ret

00000278 <enable_pmic>:
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 27e:	08 95       	ret

00000280 <enable_32mhz_clock>:
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 286:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 28a:	81 ff       	sbrs	r24, 1
 28c:	fc cf       	rjmp	.-8      	; 0x286 <enable_32mhz_clock+0x6>
 28e:	88 ed       	ldi	r24, 0xD8	; 216
 290:	84 bf       	out	0x34, r24	; 52
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 298:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
 29c:	08 95       	ret

0000029e <enable_event_sys>:
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 2a4:	08 95       	ret

000002a6 <enable_DMA2>:
 2a6:	e0 e0       	ldi	r30, 0x00	; 0
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	16 8a       	std	Z+22, r1	; 0x16
 2ac:	89 e5       	ldi	r24, 0x59	; 89
 2ae:	82 8b       	std	Z+18, r24	; 0x12
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	83 8b       	std	Z+19, r24	; 0x13
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	84 8b       	std	Z+20, r24	; 0x14
 2ba:	95 8b       	std	Z+21, r25	; 0x15
 2bc:	85 ea       	ldi	r24, 0xA5	; 165
 2be:	80 8b       	std	Z+16, r24	; 0x10
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	80 83       	st	Z, r24
 2c4:	8a e1       	ldi	r24, 0x1A	; 26
 2c6:	84 8f       	std	Z+28, r24	; 0x1c
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	85 8f       	std	Z+29, r24	; 0x1d
 2cc:	16 8e       	std	Z+30, r1	; 0x1e
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	92 e2       	ldi	r25, 0x22	; 34
 2d2:	80 8f       	std	Z+24, r24	; 0x18
 2d4:	91 8f       	std	Z+25, r25	; 0x19
 2d6:	12 8e       	std	Z+26, r1	; 0x1a
 2d8:	08 95       	ret

000002da <usartd0_init>:
 2da:	e0 e6       	ldi	r30, 0x60	; 96
 2dc:	f6 e0       	ldi	r31, 0x06	; 6
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	81 83       	std	Z+1, r24	; 0x01
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	82 83       	std	Z+2, r24	; 0x02
 2e6:	e0 ea       	ldi	r30, 0xA0	; 160
 2e8:	f9 e0       	ldi	r31, 0x09	; 9
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	83 83       	std	Z+3, r24	; 0x03
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	85 83       	std	Z+5, r24	; 0x05
 2f2:	85 ef       	ldi	r24, 0xF5	; 245
 2f4:	86 83       	std	Z+6, r24	; 0x06
 2f6:	8c ec       	ldi	r24, 0xCC	; 204
 2f8:	87 83       	std	Z+7, r24	; 0x07
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	84 83       	std	Z+4, r24	; 0x04
 2fe:	08 95       	ret

00000300 <disable_dma>:
 300:	e0 e0       	ldi	r30, 0x00	; 0
 302:	f1 e0       	ldi	r31, 0x01	; 1
 304:	10 82       	st	Z, r1
 306:	85 e2       	ldi	r24, 0x25	; 37
 308:	80 8b       	std	Z+16, r24	; 0x10
 30a:	08 95       	ret

0000030c <enable_DMA_sine>:
	start_tc();
}

void enable_DMA_sine()
{
	DMA.CH0.REPCNT = 0;
 30c:	e0 e0       	ldi	r30, 0x00	; 0
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
 312:	89 ed       	ldi	r24, 0xD9	; 217
 314:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = 512;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	84 8b       	std	Z+20, r24	; 0x14
 320:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 322:	85 ea       	ldi	r24, 0xA5	; 165
 324:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL = DMA_CH_ENABLE_bm;
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	80 83       	st	Z, r24
	
	DMA.CH0.DESTADDR0 = (((uint16_t) &DACA.CH1DATA) >> 0) & 0xFF;
 32a:	8a e1       	ldi	r24, 0x1A	; 26
 32c:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t) &DACA.CH1DATA) >> 8) & 0xFF;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
 332:	16 8e       	std	Z+30, r1	; 0x1e

	DMA.CH0.SRCADDR0 = (((uint16_t) lookupSine) >> 0) & 0xFF;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	92 e2       	ldi	r25, 0x22	; 34
 338:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t) lookupSine) >> 8) & 0xFF;
 33a:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0;
 33c:	12 8e       	std	Z+26, r1	; 0x1a
 33e:	08 95       	ret

00000340 <enable_DMA_saw>:
}

void enable_DMA_saw()
{
	DMA.CH0.REPCNT = 0;
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
 346:	89 ed       	ldi	r24, 0xD9	; 217
 348:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = 512;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	84 8b       	std	Z+20, r24	; 0x14
 354:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 356:	85 ea       	ldi	r24, 0xA5	; 165
 358:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL = DMA_CH_ENABLE_bm;
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	80 83       	st	Z, r24
	
	DMA.CH0.DESTADDR0 = (((uint16_t) &DACA.CH1DATA) >> 0) & 0xFF;
 35e:	8a e1       	ldi	r24, 0x1A	; 26
 360:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t) &DACA.CH1DATA) >> 8) & 0xFF;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
 366:	16 8e       	std	Z+30, r1	; 0x1e

	DMA.CH0.SRCADDR0 = (((uint16_t) lookupSawtooth) >> 0) & 0xFF;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e2       	ldi	r25, 0x20	; 32
 36c:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t) lookupSawtooth) >> 8) & 0xFF;
 36e:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0;
 370:	12 8e       	std	Z+26, r1	; 0x1a
 372:	08 95       	ret

00000374 <main>:
volatile char oldKey;
volatile int dataRecieved = 0;
volatile waveStarted = 0;

int main() {
	enable_32mhz_clock();
 374:	0e 94 40 01 	call	0x280	; 0x280 <enable_32mhz_clock>
	enable_event_sys();
 378:	0e 94 4f 01 	call	0x29e	; 0x29e <enable_event_sys>
	enable_pmic();
 37c:	0e 94 3c 01 	call	0x278	; 0x278 <enable_pmic>
	usartd0_init();
 380:	0e 94 6d 01 	call	0x2da	; 0x2da <usartd0_init>
	//enable_DMA2();
	sei();
 384:	78 94       	sei
	init_tc();
 386:	0e 94 2f 01 	call	0x25e	; 0x25e <init_tc>
	init_ADC2();
 38a:	0e 94 26 01 	call	0x24c	; 0x24c <init_ADC2>
	//start_tc();
	
	TCC1.CNT = 0x0;
 38e:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
 392:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
	TCC1.PER = 40000;
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	9c e9       	ldi	r25, 0x9C	; 156
 39a:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 39e:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <__TEXT_REGION_LENGTH__+0x700846>
	
	enable_DMA2();
 3a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <enable_DMA2>
	start_tc();
 3ac:	0e 94 38 01 	call	0x270	; 0x270 <start_tc>
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <main+0x3c>

000003b2 <__vector_88>:
		
	}
}

ISR(USARTD0_RXC_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	08 b6       	in	r0, 0x38	; 56
 3be:	0f 92       	push	r0
 3c0:	18 be       	out	0x38, r1	; 56
 3c2:	09 b6       	in	r0, 0x39	; 57
 3c4:	0f 92       	push	r0
 3c6:	19 be       	out	0x39, r1	; 57
 3c8:	0b b6       	in	r0, 0x3b	; 59
 3ca:	0f 92       	push	r0
 3cc:	1b be       	out	0x3b, r1	; 59
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	char data = USARTD0.DATA;
 3e6:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>

	if (data == 's') {
 3ea:	83 37       	cpi	r24, 0x73	; 115
 3ec:	91 f1       	breq	.+100    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		switchSource = 1;
		source = !source;
		} else {
		TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
		
		if (waveStarted == 0) {
 3f4:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <__data_end>
 3f8:	90 91 01 24 	lds	r25, 0x2401	; 0x802401 <__data_end+0x1>
 3fc:	89 2b       	or	r24, r25
 3fe:	91 f4       	brne	.+36     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			switch(source) {
 400:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <source>
 404:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <source+0x1>
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	b1 f1       	breq	.+108    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				case 0:
				enable_DMA_sine();
				break;
				case 1:
				enable_DMA_saw();
 410:	0e 94 a0 01 	call	0x340	; 0x340 <enable_DMA_saw>
				break;
			}
			start_tc();
 414:	0e 94 38 01 	call	0x270	; 0x270 <start_tc>
			waveStarted = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <__data_end>
 420:	90 93 01 24 	sts	0x2401, r25	; 0x802401 <__data_end+0x1>
		}
	}
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0b be       	out	0x3b, r0	; 59
 440:	0f 90       	pop	r0
 442:	09 be       	out	0x39, r0	; 57
 444:	0f 90       	pop	r0
 446:	08 be       	out	0x38, r0	; 56
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti
ISR(USARTD0_RXC_vect)
{
	char data = USARTD0.DATA;

	if (data == 's') {
		switchSource = 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <switchSource>
 45a:	90 93 05 24 	sts	0x2405, r25	; 0x802405 <switchSource+0x1>
		source = !source;
 45e:	20 91 02 24 	lds	r18, 0x2402	; 0x802402 <source>
 462:	30 91 03 24 	lds	r19, 0x2403	; 0x802403 <source+0x1>
 466:	23 2b       	or	r18, r19
 468:	11 f0       	breq	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <source>
 472:	90 93 03 24 	sts	0x2403, r25	; 0x802403 <source+0x1>
 476:	d6 cf       	rjmp	.-84     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
		
		if (waveStarted == 0) {
			switch(source) {
				case 0:
				enable_DMA_sine();
 478:	0e 94 86 01 	call	0x30c	; 0x30c <enable_DMA_sine>
				break;
				case 1:
				enable_DMA_saw();
				break;
			}
			start_tc();
 47c:	0e 94 38 01 	call	0x270	; 0x270 <start_tc>
			waveStarted = 1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <__data_end>
 488:	90 93 01 24 	sts	0x2401, r25	; 0x802401 <__data_end+0x1>
 48c:	cb cf       	rjmp	.-106    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

0000048e <__vector_20>:
		}
	}
}

ISR(TCC1_OVF_vect) {
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	08 b6       	in	r0, 0x38	; 56
 49a:	0f 92       	push	r0
 49c:	18 be       	out	0x38, r1	; 56
 49e:	09 b6       	in	r0, 0x39	; 57
 4a0:	0f 92       	push	r0
 4a2:	19 be       	out	0x39, r1	; 57
 4a4:	0b b6       	in	r0, 0x3b	; 59
 4a6:	0f 92       	push	r0
 4a8:	1b be       	out	0x3b, r1	; 59
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	TCC0.CTRLA = 0;
 4c2:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	disable_dma();
 4c6:	0e 94 80 01 	call	0x300	; 0x300 <disable_dma>
	waveStarted = 0;
 4ca:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <__data_end>
 4ce:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <__data_end+0x1>
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0b be       	out	0x3b, r0	; 59
 4ee:	0f 90       	pop	r0
 4f0:	09 be       	out	0x39, r0	; 57
 4f2:	0f 90       	pop	r0
 4f4:	08 be       	out	0x38, r0	; 56
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
