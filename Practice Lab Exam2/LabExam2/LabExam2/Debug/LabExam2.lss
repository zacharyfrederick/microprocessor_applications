
LabExam2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802002  00802002  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053bd  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003db0  00000000  00000000  00005981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a1  00000000  00000000  00009731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00009ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b98  00000000  00000000  00009fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  0000db7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000dc68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_71>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 e3       	ldi	r30, 0x36	; 54
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a2 e0       	ldi	r26, 0x02	; 2
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a6 30       	cpi	r26, 0x06	; 6
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 80 01 	call	0x300	; 0x300 <main>
 244:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <init_ADC>:
 */ 
#include "Exam.h"
#include <avr/io.h>

void init_ADC() {
	ADCA_CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
	ADCA_CH0_CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN4_gc;
 25e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f2 e0       	ldi	r31, 0x02	; 2
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	84 83       	std	Z+4, r24	; 0x04
	ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
	ADCA_EVCTRL = ADC_EVSEL_0123_gc | ADC_EVACT_CH01_gc;
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	ADCA_CTRLA |= ADC_ENABLE_bm;
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <enable_event_sys>:
}

void enable_event_sys()
{
	//sets event channel 0 source as tcc0 overflow
	EVSYS_CH0MUX = 0b11000000;
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 284:	08 95       	ret

00000286 <tcc0_init>:


void tcc0_init()
{
	//initialize count to zero
	TCC0_CNT = 0x00;
 286:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
 28a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	//set period to 15625
	TCC0_PER = 4400;
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	91 e1       	ldi	r25, 0x11	; 17
 292:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 296:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
	
	TCC0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
 2a0:	08 95       	ret

000002a2 <start_tcc0>:
}

void start_tcc0() {
	TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 2a8:	08 95       	ret

000002aa <enable_32mhz_clock>:
}

void enable_32mhz_clock() {
	OSC.CTRL = OSC_RC32MEN_bm;
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while ((OSC.STATUS & OSC_RC32MRDY_bm) == 0x00) {}
 2b0:	e0 e5       	ldi	r30, 0x50	; 80
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	81 ff       	sbrs	r24, 1
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <enable_32mhz_clock+0xa>
	
	CCP = CCP_IOREG_gc;
 2ba:	88 ed       	ldi	r24, 0xD8	; 216
 2bc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 2be:	e0 e4       	ldi	r30, 0x40	; 64
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;
 2c6:	11 82       	std	Z+1, r1	; 0x01
 2c8:	08 95       	ret

000002ca <init_DAC>:
}

void init_DAC() {
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f3 e0       	ldi	r31, 0x03	; 3
 2ce:	11 82       	std	Z+1, r1	; 0x01
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 2d0:	88 e1       	ldi	r24, 0x18	; 24
 2d2:	82 83       	std	Z+2, r24	; 0x02
	DACA.CTRLA = DAC_ENABLE_bm | DAC_CH0EN_bm;
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <usartd0_init>:
}

void usartd0_init()
{
	PORTD.DIRSET = PIN3_bm;
 2da:	e0 e6       	ldi	r30, 0x60	; 96
 2dc:	f6 e0       	ldi	r31, 0x06	; 6
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc;
 2e6:	e0 ea       	ldi	r30, 0xA0	; 160
 2e8:	f9 e0       	ldi	r31, 0x09	; 9
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc |
 2ee:	83 e3       	ldi	r24, 0x33	; 51
 2f0:	85 83       	std	Z+5, r24	; 0x05
	USART_PMODE_ODD_gc |
	USART_CHSIZE_8BIT_gc;
	
	USARTD0.BAUDCTRLA = (uint8_t)3355;
 2f2:	8b e1       	ldi	r24, 0x1B	; 27
 2f4:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)
 2f6:	8d ea       	ldi	r24, 0xAD	; 173
 2f8:	87 83       	std	Z+7, r24	; 0x07
	( ((-6) << 4)|(3355>>8) );
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	84 83       	std	Z+4, r24	; 0x04
 2fe:	08 95       	ret

00000300 <main>:
volatile int16_t result;
volatile int gain = 1;

int main(void)
{
	enable_32mhz_clock();
 300:	0e 94 55 01 	call	0x2aa	; 0x2aa <enable_32mhz_clock>
	init_ADC();
 304:	0e 94 26 01 	call	0x24c	; 0x24c <init_ADC>
	init_DAC();
 308:	0e 94 65 01 	call	0x2ca	; 0x2ca <init_DAC>
	enable_event_sys();
 30c:	0e 94 3f 01 	call	0x27e	; 0x27e <enable_event_sys>
	tcc0_init();
 310:	0e 94 43 01 	call	0x286	; 0x286 <tcc0_init>
	start_tcc0();
 314:	0e 94 51 01 	call	0x2a2	; 0x2a2 <start_tcc0>
	usartd0_init();
 318:	0e 94 6d 01 	call	0x2da	; 0x2da <usartd0_init>
	//toggle pin
	PORTC.DIRSET = 0xff;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 328:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		if (conversionComplete == 1) {
			result = ADCA_CH0_RES;
 32a:	a4 e2       	ldi	r26, 0x24	; 36
 32c:	b2 e0       	ldi	r27, 0x02	; 2
			conversionComplete = 0;	
			while ((DACA.STATUS & 0x01) != 0x01) {}
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f3 e0       	ldi	r31, 0x03	; 3
	sei();
	
    /* Replace with your application code */
    while (1) 
    {
		if (conversionComplete == 1) {
 332:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_end>
 336:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <__data_end+0x1>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	d1 f7       	brne	.-12     	; 0x332 <main+0x32>
			result = ADCA_CH0_RES;
 33e:	8d 91       	ld	r24, X+
 340:	9c 91       	ld	r25, X
 342:	11 97       	sbiw	r26, 0x01	; 1
 344:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <result>
 348:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <result+0x1>
			conversionComplete = 0;	
 34c:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <__data_end>
 350:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <__data_end+0x1>
			while ((DACA.STATUS & 0x01) != 0x01) {}
 354:	85 81       	ldd	r24, Z+5	; 0x05
 356:	80 ff       	sbrs	r24, 0
 358:	fd cf       	rjmp	.-6      	; 0x354 <main+0x54>
			DACA.CH0DATA = (result * gain);	
 35a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <result>
 35e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <result+0x1>
 362:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 366:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 36a:	42 9f       	mul	r20, r18
 36c:	c0 01       	movw	r24, r0
 36e:	43 9f       	mul	r20, r19
 370:	90 0d       	add	r25, r0
 372:	52 9f       	mul	r21, r18
 374:	90 0d       	add	r25, r0
 376:	11 24       	eor	r1, r1
 378:	80 8f       	std	Z+24, r24	; 0x18
 37a:	91 8f       	std	Z+25, r25	; 0x19
 37c:	da cf       	rjmp	.-76     	; 0x332 <main+0x32>

0000037e <__vector_71>:
		}
		
	}
}

ISR(ADCA_CH0_vect) {
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	08 b6       	in	r0, 0x38	; 56
 38a:	0f 92       	push	r0
 38c:	18 be       	out	0x38, r1	; 56
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
	conversionComplete = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <__data_end>
 39a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <__data_end+0x1>
	//result = ADCA_CH0_RES;
	//PORTD.OUTTGL = 0xff;
}
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	08 be       	out	0x38, r0	; 56
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_14>:

ISR(TCC0_OVF_vect) {
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	08 b6       	in	r0, 0x38	; 56
 3bc:	0f 92       	push	r0
 3be:	18 be       	out	0x38, r1	; 56
 3c0:	8f 93       	push	r24
	PORTC.OUTTGL = 0xff;
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
}
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	08 be       	out	0x38, r0	; 56
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_88>:

ISR(USARTD0_RXC_vect) {
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	08 b6       	in	r0, 0x38	; 56
 3e4:	0f 92       	push	r0
 3e6:	18 be       	out	0x38, r1	; 56
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
	uint8_t data = USARTD0.DATA;
 3ec:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	//USARTD0.DATA = data;
	switch (data) {
 3f0:	81 33       	cpi	r24, 0x31	; 49
 3f2:	49 f0       	breq	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f4:	82 33       	cpi	r24, 0x32	; 50
 3f6:	71 f0       	breq	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f8:	80 33       	cpi	r24, 0x30	; 48
 3fa:	91 f4       	brne	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case '0':
			gain = 0;
 3fc:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
 400:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__data_start+0x1>
			break;
 404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case '1':
			gain = 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 40e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
			break;
 412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			
		case '2':
			gain = 2;
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 41c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
			break;
		default:
			break;
	}
}
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	08 be       	out	0x38, r0	; 56
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
